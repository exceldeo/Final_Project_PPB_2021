#!/usr/bin/env python
# coding: utf-8

# In[102]:


import io
import tensorflow as tf
import numpy as np
from skimage import transform
from PIL import Image
import PIL.ImageOps
import base64


# In[230]:


model = tf.keras.models.load_model('model_2.h5')


# In[231]:


base = ''''''


# In[232]:


imgdata = base64.b64decode(base)
stream = io.BytesIO(imgdata)


# In[233]:


def load(filename):
    np_image = Image.open(filename)
    np_image = np.array(np_image).astype('float32')/255
    np_image = transform.resize(np_image, (28, 28, 1))
    np_image = np.expand_dims(np_image, axis=0)
    return np_image


# In[234]:


img = load(stream)


# In[224]:


#img = load('./cbimage.png')


# In[235]:


result = model.predict(img)
predict_classes = np.argmax(result ,axis=1)


# In[236]:


print(predict_classes)


# In[ ]:




